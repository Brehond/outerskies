name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: test_db
      DB_USER: test_user
      DB_PASSWORD: test_pass
      DB_HOST: localhost
      DB_PORT: 5432
      SECRET_KEY: test-secret-key-for-ci-only
      DEBUG: "True"
      ALLOWED_HOSTS: localhost,127.0.0.1
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      API_KEY: ${{ secrets.API_KEY }}
      API_SECRET: ${{ secrets.API_SECRET }}
      ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      ENCRYPTION_SALT: ${{ secrets.ENCRYPTION_SALT }}
      CELERY_BROKER_URL: redis://127.0.0.1:6379/0
      CELERY_RESULT_BACKEND: redis://127.0.0.1:6379/0
      REDIS_HOST: 127.0.0.1
      REDIS_PORT: 6379
      REDIS_DB: 0
      CELERY_ALWAYS_EAGER: "True"
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install plugin requirements if any
          for req in plugins/*/requirements.txt; do
            [ -f "$req" ] && pip install -r "$req" || true
          done
          # Install Redis client for health checks
          sudo apt-get update && sudo apt-get install -y redis-tools

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv311,.venv,venv,env,.env,node_modules,.git,__pycache__,.pytest_cache,migrations,static/admin,static/rest_framework,ephemeris,.github,logs

      - name: Lint plugins
        run: |
          for plugin in plugins/*; do
            if [ -d "$plugin" ]; then
              flake8 $plugin --exclude=venv311,.venv,venv,env,.env,node_modules,.git,__pycache__,.pytest_cache
            fi
          done

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          while ! pg_isready -h localhost -p 5432 -U test_user; do
            sleep 1
          done
          echo "Waiting for Redis..."
          while ! redis-cli ping; do
            sleep 1
          done
          echo "All services ready!"

      - name: Run migrations
        run: |
          python manage.py migrate

      - name: Run all tests
        run: |
          python manage.py test

      - name: Run plugin tests
        run: |
          for plugin in plugins/*; do
            if [ -d "$plugin" ] && [ -f "$plugin/tests.py" ]; then
              echo "Running tests for $plugin"
              python manage.py test $(basename $plugin)
            fi
          done

      - name: List plugins
        run: |
          python manage.py manage_plugins list

      - name: Build Docker image
        run: docker build -t outerskies:ci .
        # Comment out above if you don't want to build Docker image in CI 